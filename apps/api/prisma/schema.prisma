// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid        String          @id @default(cuid())
  firstName  String?
  lastName   String?
  verify     EmailUserVerify @default(UNVERIFY)
  roleId     Int             @default(3)
  email      String
  password   String?
  googleAuth GoogleAuthVeify @default(FALSE)

  role UserRole @relation(fields: [roleId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userProfile   UserProfile?
  Transaction   Transaction[]
  Cart          Cart[]
  resetPassword ResetPassword[]

  @@map("users")
}

enum GoogleAuthVeify {
  TRUE
  FALSE
}

enum EmailUserVerify {
  UNVERIFY
  VERFIY
}

model UserProfile {
  id        Int       @id @default(autoincrement())
  fullname  String?
  birthDate DateTime? @db.Date

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userUid           String              @unique
  user              User                @relation(fields: [userUid], references: [uid])
  addressId         Int?
  address           Address?            @relation(fields: [addressId], references: [id])
  UserImagesProfile UserImagesProfile[]

  @@map("user_profiles")
}

model UserImagesProfile {
  id  Int    @id @default(autoincrement())
  url String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userProfileId Int
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])

  @@map("user_images_profiles")
}

model ResetPassword {
  id        Int                 @id @default(autoincrement())
  expiredAt DateTime
  status    ResetPasswordStatus @default(PENDING)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userUid   String
  user      User      @relation(fields: [userUid], references: [uid])

  @@map("reset_passwords")
}

enum ResetPasswordStatus {
  PENDING
  DONE
  EXPIRED
}

model Address {
  id           Int    @id @default(autoincrement())
  province     String
  city         String
  address      String
  zip_code     String
  phone_number String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userProfileId UserProfile[]

  @@map("address")
}

model UserRole {
  id   Int    @id @default(autoincrement())
  role String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User User[]

  @@map("user_role")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  price       Int
  description String  @db.LongText
  deleted     Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  categoryId      Int
  productCategory ProductCategory   @relation(fields: [categoryId], references: [id])
  ProductImage    ProductImage[]
  StockProduct    StockProduct[]
  Transaction     Transaction[]
  Cart            Cart[]
  DiscountProduct DiscountProduct[]

  @@map("products")
}

model ProductImage {
  id           Int     @id @default(autoincrement())
  productImage String
  deleted      Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model ProductCategory {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Product              Product[]
  ProductCategoryImage ProductCategoryImage[]

  @@map("products_category")
}

model ProductCategoryImage {
  id          Int    @id @default(autoincrement())
  categoryUrl String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  productCategoryId Int
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])

  @@map("product_category_image")
}

model StockProduct {
  id    Int @id @default(autoincrement())
  stock Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  storeId   Int
  store     Store   @relation(fields: [storeId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@map("stock_products")
}

model Store {
  id        Int    @id @default(autoincrement())
  name      String
  province  String
  city      String
  address   String @db.MediumText
  zip_code  String
  latitude  Float  @default(0)
  longitude Float  @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  StockProduct StockProduct[]

  @@map("stores")
}

model Transaction {
  id       Int      @id @default(autoincrement())
  order    String
  quantity Int
  buy_date DateTime @db.Date
  price    Int
  discount String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userUid   String
  user      User       @relation(fields: [userUid], references: [uid])
  productId Int
  product   Product    @relation(fields: [productId], references: [id])
  Shipping  Shipping[]
  Payment   Payment[]

  @@map("transactions")
}

model Shipping {
  id           Int    @id @default(autoincrement())
  receiver     String
  phone_number String
  province     String
  city         String
  zip_code     Int
  address      String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@map("shipping")
}

model Cart {
  id Int @id @default(autoincrement())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userUid   String
  user      User    @relation(fields: [userUid], references: [uid])
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@map("carts")
}

model Payment {
  id            Int    @id @default(autoincrement())
  payment_image String
  status        String @default("PENDING")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@map("payments")
}

model Discount {
  id      Int      @id @default(autoincrement())
  code    String
  pieces  Int      @default(0)
  expired DateTime @db.Date
  min_pay Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("discounts")
}

model DiscountProduct {
  id      Int      @id @default(autoincrement())
  pieces  Int      @default(0)
  expired DateTime @db.Date

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  productId Int
  product   Product @relation(fields: [productId], references: [id])
}
