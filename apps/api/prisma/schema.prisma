// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid      String          @id @default(cuid())
  verify   EmailUserVerify @default(UNVERIFY)
  roleId   Int             @default(3)
  email    String
  password String

  role UserRole @relation(fields: [roleId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("users")
}

enum EmailUserVerify {
  UNVERIFY
  VERFIY
}

model UserProfile {
  id            Int      @id @default(autoincrement())
  user_id       String
  profile_image String
  ktp           String
  fullname      String
  birthDate     DateTime @db.Date
  province      String
  city          String
  address       String
  zip_code      String
  phone_number  String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("user_profiles")
}

model UserImage {
  id         Int @id @default(autoincrement())
  profile_id Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("user_images")
}

model UserRole {
  id   Int    @id @default(autoincrement())
  role String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User User[]

  @@map("user_role")
}

// rancu
model UserAddress {
  id Int @id @default(autoincrement())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("users_address")
}

model Product {
  id            Int    @id @default(autoincrement())
  category_id   Int
  product_image String
  name          String
  quantity      Int
  price         Int
  description   String @db.LongText

  category ProductCategory @relation(fields: [category_id], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("products")
}

// rancu
model ProductDetail {
  id            Int    @id @default(autoincrement())
  product_image String
  product_id    Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("product_details")
}

// rancu
model ProductImage {
  id Int @id @default(autoincrement())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("product_images")
}

model ProductCategory {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  product Product[]

  @@map("products_category")
}

model StokProduct {
  id         Int @id @default(autoincrement())
  store_id   Int
  product_id Int
  stok       Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("stok_products")
}

model Store {
  id          Int    @id @default(autoincrement())
  name        String
  location_id Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("stores")
}

model LocationStore {
  id       Int    @id @default(autoincrement())
  province String
  city     String
  address  String @db.MediumText
  zip_code String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("location_stores")
}

model Transaction {
  id         Int      @id @default(autoincrement())
  user_id    String
  product_id Int
  order      String
  quantity   Int
  buy_date   DateTime @db.Date
  price      Int
  discount   String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("transactions")
}

model Shipping {
  id             Int    @id @default(autoincrement())
  transaction_id Int
  receiver       String
  phone_number   String
  province       String
  city           String
  zip_code       Int
  address        String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("shipping")
}

model Cart {
  id         Int    @id @default(autoincrement())
  user_id    String
  product_id Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("carts")
}

model Payment {
  id             Int    @id @default(autoincrement())
  transaction_id Int
  payment_image  String
  status         String @default("PENDING")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("payments")
}

model Discount {
  id               Int      @id @default(autoincrement())
  product_id       Int
  code_voucher     String
  discount_voucher String
  expired          DateTime @db.Date
  min_payment      Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("discounts")
}
